"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Cadence_1 = require("./libs/Cadence");
module.exports.post = async (event) => {
    try {
        let body;
        try {
            body = JSON.parse(event.body);
        }
        catch (e) {
            body = event.body;
        }
        const cadence = new Cadence_1.Cadence(body);
        const result = await cadence.addCadence(body);
        return {
            statusCode: 200,
            body: JSON.stringify(result),
        };
    }
    catch (e) {
        return {
            statusCode: 400,
            body: JSON.stringify({ "success": false, "message": e.message, "error": e.stack })
        };
    }
};
module.exports.get = async (event) => {
    try {
        let body;
        try {
            body = JSON.parse(event.body);
        }
        catch (e) {
            body = event.body;
        }
        const cadenceId = event.queryStringParameters && event.queryStringParameters.cadenceId ? parseInt(event.queryStringParameters.cadenceId) : null;
        if (!cadenceId)
            throw new Error("Cadence ID Missing. Please provide the Cadence ID.");
        const cadence = new Cadence_1.Cadence(body);
        const result = await cadence.getCadenceById(cadenceId);
        //const result = "get"
        return {
            statusCode: 200,
            body: JSON.stringify(result),
        };
    }
    catch (e) {
        return {
            statusCode: 400,
            body: JSON.stringify({ "success": false, "message": e.message, "error": e.stack })
        };
    }
};
module.exports.put = async (event) => {
    try {
        let body;
        try {
            body = JSON.parse(event.body);
        }
        catch (e) {
            body = event.body;
        }
        const cadence = new Cadence_1.Cadence(body);
        const result = await cadence.updateCadence(body);
        return {
            statusCode: 200,
            body: JSON.stringify(result),
        };
    }
    catch (e) {
        return {
            statusCode: 400,
            body: JSON.stringify({ "success": false, "message": e.message, "error": e.stack })
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsNENBQXdDO0FBRXhDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssRUFDekIsS0FBMkIsRUFDSyxFQUFFO0lBQ2hDLElBQUk7UUFDRixJQUFJLElBQVEsQ0FBQztRQUNiLElBQUk7WUFDRixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFBO1NBQ2xCO1FBRUQsTUFBTSxPQUFPLEdBQVcsSUFBSSxpQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7U0FDL0IsQ0FBQztLQUNMO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQztTQUNuRixDQUFDO0tBQ0w7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxLQUFLLEVBQ3hCLEtBQTJCLEVBQ0ssRUFBRTtJQUNoQyxJQUFJO1FBQ0YsSUFBSSxJQUFRLENBQUM7UUFDYixJQUFJO1lBQ0YsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQTtTQUNsQjtRQUNELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEosSUFBRyxDQUFDLFNBQVM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7UUFDckYsTUFBTSxPQUFPLEdBQVksSUFBSSxpQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxzQkFBc0I7UUFDdEIsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBRWYsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1NBQy9CLENBQUM7S0FDTDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUM7U0FDbkYsQ0FBQztLQUNMO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxFQUN4QixLQUEyQixFQUNLLEVBQUU7SUFDaEMsSUFBSTtRQUNGLElBQUksSUFBUSxDQUFDO1FBQ2IsSUFBSTtZQUNGLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUE7U0FDbEI7UUFFRCxNQUFNLE9BQU8sR0FBVyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztTQUMvQixDQUFDO0tBQ0w7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDO1NBQ25GLENBQUM7S0FDTDtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBcclxuICBBUElHYXRld2F5UHJveHlFdmVudCwgXHJcbiAgQVBJR2F0ZXdheVByb3h5UmVzdWx0IFxyXG59IGZyb20gXCJhd3MtbGFtYmRhXCI7XHJcblxyXG5pbXBvcnQgeyBDYWRlbmNlIH0gZnJvbSAnLi9saWJzL0NhZGVuY2UnXHJcblxyXG5tb2R1bGUuZXhwb3J0cy5wb3N0ID0gYXN5bmMgKFxyXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxyXG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGJvZHk6YW55O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgYm9keSA9IGV2ZW50LmJvZHlcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgY2FkZW5jZTpDYWRlbmNlID0gbmV3IENhZGVuY2UoYm9keSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhZGVuY2UuYWRkQ2FkZW5jZShib2R5KTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlc3VsdCksXHJcbiAgICAgIH07XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1wic3VjY2Vzc1wiOiBmYWxzZSwgXCJtZXNzYWdlXCI6IGUubWVzc2FnZSwgXCJlcnJvclwiOiBlLnN0YWNrfSlcclxuICAgICAgfTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLmdldCA9IGFzeW5jIChcclxuICBldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnRcclxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxldCBib2R5OmFueTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGJvZHkgPSBldmVudC5ib2R5XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgY2FkZW5jZUlkID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzICYmIGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy5jYWRlbmNlSWQgPyBwYXJzZUludChldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMuY2FkZW5jZUlkKSA6IG51bGw7XHJcbiAgICAgIGlmKCFjYWRlbmNlSWQpIHRocm93IG5ldyBFcnJvcihcIkNhZGVuY2UgSUQgTWlzc2luZy4gUGxlYXNlIHByb3ZpZGUgdGhlIENhZGVuY2UgSUQuXCIpO1xyXG4gICAgICBjb25zdCBjYWRlbmNlOiBDYWRlbmNlID0gbmV3IENhZGVuY2UoYm9keSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhZGVuY2UuZ2V0Q2FkZW5jZUJ5SWQoY2FkZW5jZUlkKTtcclxuICAgICAgLy9jb25zdCByZXN1bHQgPSBcImdldFwiXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlc3VsdCksXHJcbiAgICAgIH07XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1wic3VjY2Vzc1wiOiBmYWxzZSwgXCJtZXNzYWdlXCI6IGUubWVzc2FnZSwgXCJlcnJvclwiOiBlLnN0YWNrfSlcclxuICAgICAgfTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLnB1dCA9IGFzeW5jIChcclxuICBldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnRcclxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxldCBib2R5OmFueTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGJvZHkgPSBldmVudC5ib2R5XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGNhZGVuY2U6Q2FkZW5jZSA9IG5ldyBDYWRlbmNlKGJvZHkpO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWRlbmNlLnVwZGF0ZUNhZGVuY2UoYm9keSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXN1bHQpLFxyXG4gICAgICB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcInN1Y2Nlc3NcIjogZmFsc2UsIFwibWVzc2FnZVwiOiBlLm1lc3NhZ2UsIFwiZXJyb3JcIjogZS5zdGFja30pXHJcbiAgICAgIH07XHJcbiAgfVxyXG59Il19